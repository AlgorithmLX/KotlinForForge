buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

version = "2.0.0"
group = 'thedarkcolour.kotlinforforge'
archivesBaseName = 'kotlinforforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar

repositories {
    mavenCentral()
    mavenLocal() // for using custom forge version
}

dependencies {
    minecraft "net.minecraftforge:forge:1.17.1-36.1.90-fix-1.17.x-library-loading"

	api group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
	api group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlin_version
	api group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
	api group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
    api group: "org.jetbrains", name: "annotations", version: annotations_version
	api group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	api group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core-jvm", version: coroutines_version
	api group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
    api group: "org.jetbrains.kotlinx", name: "kotlinx-serialization-json", version: serialization_version
}

minecraft {
    mappings channel: 'official', version: '1.17.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                kotlinforforge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'
        }
    }
}

shadowJar {
    archiveClassifier.set("obf")

    dependencies {
        include dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
        include dependency("org.jetbrains:annotations:${annotations_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${serialization_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:${serialization_version}")
    }
}

jar {
    manifest {
        attributes([
                "FMLModType": "LANGPROVIDER",
                "Specification-Title": "Kotlin for Forge",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"thedarkcolour",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jdkHome = javaToolchains.compilerFor(java.toolchain).get().metadata.installationPath.asFile.absolutePath
    kotlinOptions.freeCompilerArgs = [ "-Xexplicit-api=warning", "-Xjvm-default=all" ]
    kotlinOptions.jvmTarget = "16"
}

kotlinSourcesJar {
    from(sourceSets.main.kotlin.srcDirs)
}