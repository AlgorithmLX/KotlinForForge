buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
}

apply plugin: 'net.minecraftforge.gradle'

version = "1.15.0"
group = 'thedarkcolour.kotlinforforge'
archivesBaseName = 'kotlinforforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar

repositories {
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.4'

	api group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
	api group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
    api group: "org.jetbrains", name: "annotations", version: annotations_version
	api group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	api group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core-jvm", version: coroutines_version
	api group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
    api group: "org.jetbrains.kotlinx", name: "kotlinx-serialization-json", version: serialization_version
}

minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'
        }
    }
}

shadowJar {
    archiveClassifier.set("obf")

    dependencies {
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
        include dependency("org.jetbrains:annotations:${annotations_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${serialization_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:${serialization_version}")
    }
}

jar {
    manifest {
        attributes(["FMLModType": "LANGPROVIDER"])
        attributes([
                "Specification-Title": "Mod Language Provider",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"thedarkcolour",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ], "thedarkcolour/kotlinforforge/")
    }
}

static def options(kotlinOptions)  {
    kotlinOptions.freeCompilerArgs = ['-Xexplicit-api=warning', '-Xjvm-default=all']
}

compileKotlin {
    options(kotlinOptions)
}

compileTestKotlin {
    options(kotlinOptions)
}

kotlinSourcesJar {
    from(sourceSets.main.kotlin.srcDirs)
}

import java.nio.file.Files
import java.security.MessageDigest

task addToMaven {
    def folder = file("thedarkcolour/kotlinforforge/" + project.version)

    for (def file : folder.listFiles()) {
        def split = file.name.split('-')
        if (split.length > 1 && split[1].contains(project.version) && !(file.path.endsWith("sha1") || file.path.endsWith("md5"))) {
            copySpec().from(file.path).into(folder.path)

            writeSum(file, "MD5", ".md5")
            writeSum(file, "SHA-1", ".sha1")
        }
    }

    def metadata = file("thedarkcolour/kotlinforforge/maven-metadata.xml")
    writeSum(metadata, "MD5", ".md5")
    writeSum(metadata, "SHA-1", ".sha1")
}

static def writeSum(File file, String digest, String extension) {
    def sumFile = new File(file.path + extension)
    def sum = new BigInteger(1, MessageDigest.getInstance(digest).digest(Files.readAllBytes(file.toPath()))).toString(16)
    sumFile.setWritable(true)
    def writer = new BufferedWriter(new FileWriter(sumFile))
    writer.write(sum)
    sumFile.createNewFile()
    writer.close()
}